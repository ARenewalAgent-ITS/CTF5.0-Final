import os
import random
import math
import string

rol = lambda val, r_bits, max_bits: \
    (val << r_bits%max_bits) & (2**max_bits-1) | \
    ((val & (2**max_bits-1)) >> (max_bits-(r_bits%max_bits)))

ror = lambda val, r_bits, max_bits: \
    ((val & (2**max_bits-1)) >> r_bits%max_bits) | \
    (val << (max_bits-(r_bits%max_bits)) & (2**max_bits-1))

def generate_iv(l, nonce):
    assert l <= len(list_char)
    
    rand_val = random.randint(1, l-1)
    arr = [rng[rand_val] for _ in range(l)] 
    mul = math.prod(arr)
    mul = mul**2025
    random_array = []    
    
    for i in range(l):
        random_array.append(list_char[rng.index(mul * rng[list_char.index(nonce[i])])])
    
    iv = ""
    for i in range(0, l, 2):
        iv += random_array[i]
    return iv.encode()

def xor(a, b):
    res = []
    for i, j in zip(a, b):
        res.append(i^^j)
    return bytes(res)

def encrypt(plaintext, key, iv, derive = False):
    
    plaintext = bytearray(plaintext)
    
    if derive:
        derived_plaintext = [0 for _ in range(len(plaintext))]
        constant_values = [[0 for _ in range(len(plaintext))] for __ in range(len(plaintext))]
        counter = 0
        
        for i in range(len(plaintext)):
            for j in range(len(plaintext)):
                constant_values[j][i] = zbox[counter%len(sbox)]
                counter += 1
        
        for i in range(len(plaintext)):
            for j in range(len(plaintext)):
                derived_plaintext[i] += (constant_values[i][j] * plaintext[j])
        
        for i in range(len(plaintext)):
            derived_plaintext[i] %= len(sbox)
        
        plaintext = bytearray(derived_plaintext)
    
    for k in range(rounds):
        plaintext = bytearray(xor(plaintext, key[k*4:(k+2)*4]))
        for i in range(8):
            plaintext[i] = rol(plaintext[i], rr[i], 8)
            plaintext[i] = sbox[plaintext[i]]
            plaintext[i] = ror(plaintext[i], rr[i], 8)
        tmp_arr = bytearray(8)
        for i in range(8):
            for j in range(8):
                byte_val = (((plaintext[i] ^^ xbox[(i * 8) + j]) >> tbox[i][j]) & 1)
                tmp_arr[j] |= (byte_val  << (7 - i)) 
        plaintext = tmp_arr
        plaintext = xor(plaintext, iv[k*8:(k+1)*8])
    return plaintext

sbox = [229, 2, 179, 191, 192, 131, 79, 209, 45, 138, 235, 77, 102, 70, 174, 33, 169, 48, 213, 116, 173, 175, 22, 34, 223, 109, 161, 106, 39, 142, 159, 31, 63, 21, 151, 219, 207, 74, 65, 225, 181, 110, 244, 198, 56, 61, 60, 85, 3, 194, 42, 160, 172, 246, 103, 25, 87, 32, 23, 58, 29, 44, 190, 14, 147, 18, 107, 19, 132, 170, 99, 203, 232, 153, 69, 211, 101, 66, 210, 57, 215, 4, 155, 123, 136, 146, 171, 220, 178, 234, 216, 30, 189, 72, 158, 118, 164, 199, 100, 254, 154, 250, 16, 145, 185, 1, 6, 205, 165, 245, 84, 88, 202, 20, 150, 124, 177, 251, 89, 149, 218, 51, 52, 67, 222, 186, 8, 243, 94, 242, 117, 35, 12, 128, 183, 71, 113, 212, 83, 49, 36, 24, 81, 127, 195, 166, 221, 163, 126, 114, 55, 46, 5, 76, 93, 148, 111, 129, 40, 0, 92, 248, 7, 112, 141, 125, 53, 226, 201, 98, 233, 184, 135, 228, 140, 208, 247, 104, 200, 188, 115, 162, 196, 253, 54, 120, 204, 75, 121, 50, 152, 252, 9, 95, 130, 236, 37, 62, 91, 26, 97, 11, 197, 187, 193, 13, 230, 167, 180, 134, 28, 133, 82, 176, 96, 10, 182, 139, 90, 47, 15, 224, 143, 119, 227, 156, 168, 38, 43, 237, 73, 122, 240, 238, 137, 105, 17, 27, 144, 68, 206, 214, 249, 80, 231, 157, 239, 217, 108, 86, 255, 41, 64, 241, 59, 78]
xbox = [78, 59, 241, 64, 41, 255, 86, 108, 217, 239, 157, 231, 80, 249, 214, 206, 68, 144, 27, 17, 105, 137, 238, 240, 122, 73, 237, 43, 38, 168, 156, 227, 119, 143, 224, 15, 47, 90, 139, 182, 10, 96, 176, 82, 133, 28, 134, 180, 167, 230, 13, 193, 187, 197, 11, 97, 26, 91, 62, 37, 236, 130, 95, 9, 252, 152, 50, 121, 75, 204, 120, 54, 253, 196, 162, 115, 188, 200, 104, 247, 208, 140, 228, 135, 184, 233, 98, 201, 226, 53, 125, 141, 112, 7, 248, 92, 0, 40, 129, 111, 148, 93, 76, 5, 46, 55, 114, 126, 163, 221, 166, 195, 127, 81, 24, 36, 49, 83, 212, 113, 71, 183, 128, 12, 35, 117, 242, 94, 243, 8, 186, 222, 67, 52, 51, 218, 149, 89, 251, 177, 124, 150, 20, 202, 88, 84, 245, 165, 205, 6, 1, 185, 145, 16, 250, 154, 254, 100, 199, 164, 118, 158, 72, 189, 30, 216, 234, 178, 220, 171, 146, 136, 123, 155, 4, 215, 57, 210, 66, 101, 211, 69, 153, 232, 203, 99, 170, 132, 19, 107, 18, 147, 14, 190, 44, 29, 58, 23, 32, 87, 25, 103, 246, 172, 160, 42, 194, 3, 85, 60, 61, 56, 198, 244, 110, 181, 225, 65, 74, 207, 219, 151, 21, 63, 31, 159, 142, 39, 106, 161, 109, 223, 34, 22, 175, 173, 116, 213, 48, 169, 33, 174, 70, 102, 77, 235, 138, 45, 209, 79, 131, 192, 191, 179, 2, 229]
zbox = [3, 7, 5, 13, 29, 17, 23, 61, 43, 47, 107, 199, 229, 241, 179, 431, 409, 257, 359, 281, 353, 331, 463, 389, 461, 487, 317, 373, 593, 733, 983, 677, 887, 541, 859, 977, 719, 809, 1453, 1889, 1213, 1097, 1123, 1399, 1171, 1439, 1367, 1699, 1607, 1949, 1361, 2441, 3331, 3881, 3319, 2851, 2671, 4001, 2797, 2141, 3989, 3967, 2617, 2309, 3407, 3739, 3347, 3923, 3343, 2351, 2339, 2557, 3919, 3137, 4547, 4519, 5843, 6911, 5657, 7451, 5927, 5011, 4457, 7433, 4231, 4289, 5479, 6011, 7411, 5003, 4339, 6719, 4931, 4603, 5669, 7591, 4229, 8089, 7723, 6199, 6229, 8111, 6037, 4799, 7937, 5827, 6967, 4793, 6791, 7547, 4447, 7541, 4423, 4297, 5569, 4283, 4651, 5573, 4889, 7187, 6577, 6133, 4817, 6353, 6221, 5651, 8017, 6659, 14851, 12503, 10957, 9733, 14563, 12983, 10079, 9929, 14741, 11867, 8329, 9431, 15749, 11087, 12263, 15299, 12973, 12049, 15731, 13487, 13723, 14449, 14633, 9803, 14293, 14087, 16057, 12641, 15817, 8623, 11117, 11003, 10391, 9767, 11173, 8311, 9091, 10091, 15319, 8741, 31741, 24841, 30059, 24953, 20743, 24481, 20509, 24683, 21023, 23671, 22871, 26731, 25237, 32363, 17189, 19973, 23143, 23159, 22697, 21863, 21419, 32411, 26407, 25253, 17573, 24907, 19559, 23063, 25889, 24749, 18917, 22003, 17137, 28933, 27073, 31063, 20123, 28219, 26591, 26557, 22541, 22639, 22921, 21377, 26813, 27481, 23029, 20479, 29587, 26669, 18523, 22727, 19861, 17191, 17359, 27791, 19079, 21001, 24473, 26083, 32491, 17293, 27751, 19661, 32579, 19319, 30983, 26893, 29989, 25111, 41443, 51691, 56039, 35251]
tbox = [
 [6, 0, 1, 7, 4, 5, 2, 3],
 [1, 5, 2, 3, 0, 6, 7, 4],
 [7, 1, 6, 0, 4, 3, 2, 5],
 [0, 7, 2, 4, 5, 6, 3, 1],
 [4, 6, 0, 2, 5, 7, 1, 3],
 [0, 2, 7, 5, 1, 6, 3, 4],
 [0, 3, 6, 1, 7, 2, 4, 5],
 [4, 0, 7, 5, 3, 6, 1, 2]
]
rr = [3, 2, 7, 9, 6, 4, 5, 0]
list_char = string.printable[:62] + "_-"
rounds = 2
key_length = 4 + rounds * 4
rng = list(GF(64))

key = os.urandom(key_length)
iv = generate_iv(16 * rounds, "_ARA5_VERY_SECURE_INITIAL_NONCE_")

flag = b"ARA5{fake_flag_but_worth_to_try?}"
if len(flag) % 8 != 0:
    flag = flag.ljust(len(flag) + (8 - len(flag) % 8), b"\x00")

leaks = []
for i in range(8):
    plaintext = os.urandom(8)
    arr  = [plaintext.hex(), encrypt(plaintext, key, iv).hex()]
    leaks.append(arr)

ciphertext = []
for i in range(0, len(flag), 8):
    ciphertext.append(encrypt(flag[i:i+8], key, iv, True).hex())

print(f"{leaks = }")
print(f"{ciphertext = }")
